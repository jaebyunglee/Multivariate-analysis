rm(list=ls())
library(stargazer)
library(MASS) #lda,qda
library(biotools) #boxM
library(klaR) #sknn
library(class) #knn
library(kernlab) #ksvm
library(ROCR) #ROC

y = c(2,2,2,2,2,2,2,1,1,1,1,1,1,1,1)
x1 = c(41,38,27,36,25,48,40,32,10,35,22,22,15,19,25)
x2 = c(45,21,26,23,30,49,35,28,23,42,18,26,22,30,35)
x.mat = cbind(x1,x2)
data = matrix(c(y,x1,x2),15,3)
colnames(data) = c("y","x1","x2")
rownames(data) = c(1:length(y))

stargazer(t(data),title = "Data set")

##lda
#lda.function
lda.fun = function(x,#matrix
                   y,#vector
                   k, #group
                   l  #group
){data = cbind(y,x)
mu_k = rowMeans(t(data[data[,1]==k,-1]))
mu_l = rowMeans(t(data[data[,1]==l,-1]))
pi_k = dim(data[data[,1]==k,])[1]/length(y)
pi_l = dim(data[data[,1]==l,])[1]/length(y)
x1 = t(data[data[,1]==k,-1])
x2 = t(data[data[,1]==l,-1])
gcov.mat = ((x1-rowMeans(x1))%*%t((x1-rowMeans(x1)))+(x2-rowMeans(x2))%*%t((x2-rowMeans(x2))))/(length(y)-2)
value = drop(log(pi_k/pi_l)-1/2*t(mu_k+mu_l)%*%solve(gcov.mat)%*%(mu_k-mu_l))+x%*%solve(gcov.mat)%*%(mu_k-mu_l)
return(drop(ifelse(value>0,k,l)))
}
lda.fun(x.mat,y,1,2)
#lda packages
ld = lda(y~x1+x2)
a_1 = ld$scaling[1]
a_2 = ld$scaling[2]
a_0 = mean(ld$means%*%ld$scaling)
predict(ld)
predict(ld)$class
sum(factor(y)==predict(ld)$class)/length(y)
new.data = data.frame(x1 = c(20),x2 = c(40))
predict(ld,new.data)
table(y,predict(ld)$class)
y1 = c(1)
pl = predict(ld,new.data)
plr = prediction(pl,y1)
#lda_cv
lc = lda(y~x1+x2,CV=T)

##qda
y = c(2,2,2,2,2,2,2,1,1,1,1,1,1,1,1)
x1 = c(51,48,37,30,45,48,40,22,11,25,15,23,30,19,30)
x2 = c(45,31,28,27,50,40,37,38,35,42,49,36,33,40,37)
x.mat = cbind(x1,x2)
xx1 = cbind(x1[y==1],x2[y==1])
xx2 = cbind(x1[y==2],x2[y==2])
d = matrix(c(x1,x2),15,2)
boxM(d,factor(y))
#qda.function
qda.fun = function(x,#matrix
                   y,#vector
                   k, #group
                   l  #group
){data = cbind(y,x)
mu_k = rowMeans(t(data[data[,1]==k,-1]))
mu_l = rowMeans(t(data[data[,1]==l,-1]))
pi_k = dim(data[data[,1]==k,])[1]/length(y)
pi_l = dim(data[data[,1]==l,])[1]/length(y)
x1 = t(data[data[,1]==k,-1])
x2 = t(data[data[,1]==l,-1])
delta_k = -1/2*log(abs(det(cov(t(x1)))))-1/2*diag(t(t(x)-mu_k)%*%solve(cov(t(x1)))%*%(t(x)-mu_k))+log(pi_k)
delta_l = -1/2*log(abs(det(cov(t(x2)))))-1/2*diag(t(t(x)-mu_l)%*%solve(cov(t(x2)))%*%(t(x)-mu_l))+log(pi_l)
return(drop(ifelse(delta_k-delta_l>0,k,l)))
}
qda.fun(x.mat,y,1,2)
#qda.package
qd = qda(y~x1+x2)
predict(qd)
predict(qd)$class
sum(factor(y)==predict(qd)$class)/length(y)
predict(qd)$class==qda.fun(x.mat,y,1,2)

table(y,predict(qd)$class)
new.data = data.frame(x1=c(20),x2=c(40))
predict(qd,new.data)

##lda vs qda vs knn vs NaiveBayes vs svm
#data
x1 = c(50,48,35,31,45,48,38,41,33,43,22,11,25,25,23,33,25,29,30,32,39,45,37,35,47,28,29,30,31,19)
x2 = c(35,31,38,35,42,40,39,45,42,55,38,35,42,49,36,35,38,37,42,30,39,48,59,55,49,39,45,40,49,50)
d = matrix(c(x1,x2),30,2)
y = c(2,2,2,2,2,1,1,1,1,1,3,3,3,3,3,2,2,2,2,2,1,1,1,1,1,3,3,3,3,3)
yy = factor(y)
#lda
ld = lda(y~x1+x2)
sum(diag(table(y,predict(ld)$class)))/length(y)

#qda
qd = qda(y~x1+x2)
sum(diag(table(y,predict(qd)$class)))/length(y)

#knn
sk = sknn(yy~x1+x2,kn=3)
sum(diag(table(yy,predict(sk)$class)))/length(y)

#NaiveBayes
nb = NaiveBayes(d,yy)
sum(diag(table(yy,predict(nb)$class)))/length(y)

#svm
ks = ksvm(d,yy)
sum(diag(table(yy,predict(ks))))/length(y)


#ROC & AUC
install.packages("ROCR")
library(ROCR)
p = predict(fit,test,type="response")
pr = prediction(p,test$admit)
prf = performance(pr,measure = "tpr", x.measure="fpr")
auc = performance(pr,measure = "auc")
auc@y.values[[1]]
